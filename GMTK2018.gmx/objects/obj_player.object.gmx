<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>grapspeed = 1;
dir=0;
dx=0;
dy=0;
vx=0;
vy=0;
len=0;
walled = false;
floored = false;

chainWidth = 0;
chainLength = 0;
chainAngle = 0;

coins = 0;

fromLevelSelect = false;

instance_create(0,0,obj_arm);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Super HOT Grapple Physics and Gravity (So HOT)

if mouse_check_button_pressed(mb_left){
    if !(instance_exists(obj_grappleHead)){
            instance_create(x, y, obj_grappleHead)
        }
}

if keyboard_check(ord('R')){
    room_restart();
}

if instance_exists(obj_grappleHead){
    if obj_grappleHead.stuck{
        dx = obj_grappleHead.x - x;
        dy = obj_grappleHead.y - y;
        
        len = sqrt(dx*dx + dy*dy);
        
        dx = (dx/len);
        dy = (dy/len);
        
        vx = vx + dx * grapspeed;
        vy = vy + dy * grapspeed;
    }
}


//For Collisions
if position_meeting(x, y, obj_grappleHead) and obj_grappleHead.stuck{
    vx = 0;
    vy = 0;
}

var sprite_center_to_x_edge = sprite_width / 2;
var sprite_right_x = x + sprite_center_to_x_edge;
var sprite_left_x = x - sprite_center_to_x_edge;
if position_meeting(sprite_right_x, y, obj_wall) {
    if !walled {
        vx = 0;
        walled = true;
        var nearestWall = instance_nearest(sprite_right_x, y, obj_wall);
        var x_distance_between_centers = nearestWall.sprite_width/2 + sprite_center_to_x_edge;
        x = nearestWall.x - x_distance_between_centers;
    }
    if vx &gt; 0 {
        vx = 0;
    }
} else if position_meeting(sprite_left_x, y, obj_wall) {
    if !walled {
        vx = 0;
        walled = true;
        var nearestWall = instance_nearest(sprite_left_x, y, obj_wall);
        var x_distance_between_centers = nearestWall.sprite_width/2 + sprite_center_to_x_edge;
        x = nearestWall.x + x_distance_between_centers;
    }
    if vx &lt; 0 {
        vx = 0;
    }
} else {
    walled = false;
}

var sprite_center_to_y_edge = sprite_height / 2;
var sprite_top_y = y + sprite_center_to_y_edge;
var sprite_bottom_y = y - sprite_center_to_y_edge;
if position_meeting(x, sprite_top_y, obj_wall) {
    if !floored {
        vy = 0;
        floored = true;
        var nearestWall = instance_nearest(x, sprite_top_y, obj_wall);
        var y_distance_between_centers = nearestWall.sprite_height / 2 + sprite_center_to_y_edge;
        y = nearestWall.y - y_distance_between_centers;
    }
    if vy &gt; 0 {
        vy = 0;
    }
} else if position_meeting(x, sprite_bottom_y, obj_wall) {
    if !floored {
        vy = 0.5;
        floored = true;
        var nearestWall = instance_nearest(x, sprite_bottom_y, obj_wall);
        var y_distance_between_centers = nearestWall.sprite_height / 2 + sprite_center_to_y_edge;
        y = nearestWall.y + y_distance_between_centers;
    }
    if vy &lt; 0 {
        vy = 0;
    }
} else {
    floored = false;
}


//Moves the chara
x += vx;
y += vy;



vy += 0.25;
if vx != 0 {
    if floored {
        vx -= (vx/abs(vx))*.8;
        if(vx &lt; 0){
            vx = 0;
        }
    } else {
        vx -= (vx/abs(vx))*0.025;
    }
}


vx = clamp(vx, -10, 10);
vy = clamp(vy, -10, 10);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Arm Movement
obj_arm.x=x;
obj_arm.y=y;
 
 
if mouse_check_button(mb_left){
    if instance_exists(obj_grappleHead){
        //sprite_index=spr_player_aim; 
        obj_arm.image_angle=point_direction(obj_arm.x, obj_arm.y, mouse_x, mouse_y)+90;   
        obj_arm.depth=-1;
    }
    
}

else{
    obj_arm.image_angle=0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Chain Code

draw_sprite(spr_player, 0, x, y);

if instance_exists(obj_grappleHead){
    chainWidth = sprite_get_width(spr_chain); //Your chain sprite here
    chainLength = point_distance(obj_player.x, obj_player.y, obj_grappleHead.x, obj_grappleHead.y); //Get the length of the entire chain.
    chainAngle = degtorad(point_direction(obj_player.x, obj_player.y, obj_grappleHead.x, obj_grappleHead.y)); //get the angle of the chain and convert it from degrees to radians

    for(var i = 0; i &lt; chainLength; i += chainWidth) //Run a loop so we draw every chain-segment
    {
        // This is the big one. We draw the chain segment at the proper rotated angle, with an x-coordinate multiplied by cos(chainAngle), and a y-coordinate multiplied by sin(chainAngle).
        // They're both multiplied by cos/sin so the chain-segments each appear at the correct x/y coordinates, given by the angle of the chain.
        draw_sprite_ext(spr_chain, 0, obj_player.x + ( cos(chainAngle) * i ) + ( cos(chainAngle) * (chainWidth/2) ), (obj_player.y - ( sin( chainAngle ) * i )) + (sin( chainAngle ) * (chainWidth/2) ), 1, 1, radtodeg(chainAngle), c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
